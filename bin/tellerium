#!/usr/bin/env node

const wrap = require("@gustavnikolaj/async-main-wrap");
const Mocha = require("mocha");
const path = require("path");
const yargs = require("yargs");

const tellerium = require("../lib/index");

exports.execute = ({ filePath, format, timeout }) => {
  const mocha = new Mocha({});
  mocha.ui("exports");
  mocha.timeout(timeout);

  const instance = tellerium.fromFile(filePath, format);
  const testCases = instance.testCases;

  const testExports = {
    before: () => instance.createEnvironment(),
    after: () => instance.destroyEnvironment()
  };
  for (const testCase of testCases) {
    testExports[testCase.name] = () => {
      return instance.runTest(testCase.name);
    };
  }

  // register the test cases
  mocha.suite.emit("require", testExports, filePath);

  return new Promise(resolve => {
    mocha.run(() => {
      resolve();
    });
  });
};

const configureArgs = () => yargs =>
  yargs
    .positional("filePath", {
      type: "string",
      describe: "The test file to be executed."
    })
    .option("type", {
      type: "string",
      demand: true,
      choices: ["side"],
      describe: "The format of the input test file."
    })
    .option("timeout", {
      type: "number",
      default: 10000,
      describe:
        "Specify a timeout in ms that should apply when executing tests."
    });

const processArgs = () =>
  yargs
    .usage("$0 <cmd> [args]")
    .command(
      ["* <filePath>", "execute <filePath>"],
      "Run tests supplied in the given test file.",
      configureArgs()
    )
    .help().argv;

const main = cwd => {
  const argv = processArgs();
  const command = argv._[0] || "execute";

  const args = {
    filePath: path.resolve(cwd, argv.filePath),
    format: argv.type,
    timeout: argv.timeout
  };

  return exports[command](args);
};

wrap(main)(process.cwd());
