#!/usr/bin/env node

const wrap = require("@gustavnikolaj/async-main-wrap");
const Mocha = require("mocha");
const path = require("path");
const yargs = require("yargs");

const tellerium = require("../lib/index");

const argvToOptions = argv => {
  if (argv.selenium) {
    return {
      adapter: "selenium"
    };
  } else if (argv.ramble) {
    return {
      adapter: "puppeteer",
      adapterOptions: {
        headless: false
      }
    };
  } else {
    // defaults
    return {
      adapter: "puppeteer"
    };
  }
};

const attemptExecuteHook = (instance, hookName) => {
  return instance.runTest(hookName).catch(err => {
    if (err.name === "MissingTestError") {
      return null;
    }
    throw err;
  });
};

exports.execute = ({ filePath, format, timeout }, argv) => {
  const mocha = new Mocha({});
  mocha.ui("exports");
  mocha.timeout(timeout);

  const options = argvToOptions(argv);
  const instance = tellerium.fromFile(filePath, format, options);
  const testCases = instance.testCases;

  const testExports = {
    before: () =>
      instance.createEnvironment().then(() => {
        return attemptExecuteHook(instance, "__before");
      }),
    after: () =>
      Promise.resolve()
        .then(() => attemptExecuteHook(instance, "__after"))
        .then(() => instance.destroyEnvironment())
  };

  const testCasesWithoutHooks = testCases.filter(
    testCase => !["__before", "__after"].includes(testCase.name)
  );

  for (const testCase of testCasesWithoutHooks) {
    testExports[testCase.name] = () => {
      return instance.runTest(testCase.name);
    };
  }

  // register the test cases
  mocha.suite.emit("require", testExports, filePath);

  return new Promise((resolve, reject) => {
    mocha.run(failureCount => {
      if (failureCount > 0) {
        reject(new Error(`Some failing tests were recorded: ${failureCount}`));
      } else {
        resolve();
      }
    });
  });
};

const configureArgs = () => yargs =>
  yargs
    .positional("filePath", {
      type: "string",
      describe: "The test file to be executed."
    })
    .option("type", {
      type: "string",
      demand: true,
      choices: ["side"],
      describe: "The format of the input test file."
    })
    .option("timeout", {
      type: "number",
      default: 10000,
      describe:
        "Specify a timeout in ms that should apply when executing tests."
    })
    .option("ramble", {
      type: "boolean",
      describe: "Execute with non-headless puppeteer."
    })
    .option("selenium", {
      type: "boolean",
      describe: "Execute with selenium webdriver."
    })
    .conflicts({
      ramble: "selenium",
      selenium: "ramble"
    });

const processArgs = () =>
  yargs
    .usage("$0 <cmd> [args]")
    .command(
      ["* <filePath>", "execute <filePath>"],
      "Run tests supplied in the given test file.",
      configureArgs()
    )
    .help().argv;

const main = cwd => {
  const argv = processArgs();
  const command = argv._[0] || "execute";

  const args = {
    filePath: path.resolve(cwd, argv.filePath),
    format: argv.type,
    timeout: argv.timeout
  };

  return exports[command](args, argv);
};

wrap(main)(process.cwd());
